<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[PAT_1091]]></title>
    <url>%2F%2FPAT%2Fcjsjsbf890000csv91ik8xyp4%2F</url>
    <content type="text"><![CDATA[1091 Acute Stroke题目描述One important factor to identify acute stroke (急性脑卒中) is the volume of the stroke core. Given the results of image analysis in which the core regions are identified in each MRI slice, your job is to calculate the volume of the stroke core. Input Specification:Each input file contains one test case. For each case, the first line contains 4 positive integers: M, N, L and T, where M and N are the sizes of each slice (i.e. pixels of a slice are in an M×N matrix, and the maximum resolution is 1286 by 128); L (≤60) is the number of slices of a brain; and T is the integer threshold (i.e. if the volume of a connected core is less than T, then that core must not be counted). Then L slices are given. Each slice is represented by an M×N matrix of 0’s and 1’s, where 1 represents a pixel of stroke, and 0 means normal. Since the thickness of a slice is a constant, we only have to count the number of 1’s to obtain the volume. However, there might be several separated core regions in a brain, and only those with their volumes no less than T are counted. Two pixels are connectedand hence belong to the same region if they share a common side, as shown by Figure 1 where all the 6 red pixels are connected to the blue one. Output Specification:For each case, output in a line the total volume of the stroke core. Sample Input:123456789101112131415163 4 5 21 1 1 11 1 1 11 1 1 10 0 1 10 0 1 10 0 1 11 0 1 10 1 0 00 0 0 01 0 1 10 0 0 00 0 0 00 0 0 10 0 0 11 0 0 0 Sample Output:126 思路开始使用的是dfs，类似于dfs求解连通块的算法，但是发现dfs无论怎么修改后面两组数据总是出现段错误，但是计算后面的内存使用情况也没有超过64M,所以打算换用bfs求解，使用bfs可以得到正确结果 dfs程序只得到了25分，并没有满分，如果有修改并可以通过的地方，感觉大家的指点 程序bfs方法(30分)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;iostream&gt;#include &lt;initializer_list&gt;#include &lt;algorithm&gt;#include &lt;string&gt;#include &lt;string.h&gt;#include &lt;queue&gt; using namespace std;const int maxn = 1286;const int maxm = 128;const int maxd = 60;int m,n,l,k;int mapp[maxd][maxn][maxm];bool flag[maxd][maxn][maxm];int dx[] = &#123;0,1,0,-1,0,0&#125;;int dy[] = &#123;1,0,-1,0,0,0&#125;;int dz[] = &#123;0,0,0,0,1,-1&#125;;int tx,ty,tz;struct Node&#123; int x,y,z;&#125;; int bfs(int x,int y,int z)&#123; Node tmp; int num = 0; queue&lt;Node&gt; que; que.emplace(Node&#123;x,y,z&#125;); while(!que.empty()) &#123; tmp = que.front();que.pop(); num ++; for(int i = 0 ;i &lt; 6;i ++) &#123; tx = tmp.x + dx[i];ty = tmp.y + dy[i];tz = tmp.z + dz[i]; if(tx &gt;= 0 &amp;&amp; tx &lt; l &amp;&amp; ty &gt;= 0 &amp;&amp; ty &lt; m &amp;&amp; tz &gt;= 0 &amp;&amp; tz &lt; n &amp;&amp; !flag[tx][ty][tz] &amp;&amp; mapp[tx][ty][tz]) &#123; flag[tx][ty][tz] = 1; que.emplace(Node&#123;tx,ty,tz&#125;); &#125; &#125; &#125; return num&gt;=k?num:0;&#125; int main()&#123; memset(flag,0,sizeof(flag)); scanf("%d%d%d%d",&amp;m,&amp;n,&amp;l,&amp;k); for(int i = 0;i &lt; l;i ++) for(int j = 0;j &lt; m;j ++) for(int z = 0;z &lt; n;z ++) scanf("%d",&amp;mapp[i][j][z]); int ans = 0; for(int i = 0;i &lt; l;i ++) for(int j = 0;j &lt; m;j ++) for(int z = 0;z &lt; n;z ++) if(!flag[i][j][z] &amp;&amp; mapp[i][j][z]) &#123; flag[i][j][z] = 1; ans += bfs(i,j,z); &#125; printf("%d\n",ans); return 0;&#125; dfs方法(25分)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;iostream&gt;#include &lt;initializer_list&gt;#include &lt;algorithm&gt;#include &lt;string&gt; using namespace std;const int maxn = 1290;const int maxm = 130;const int maxd = 65;int m,n,l,k;int mapp[maxd][maxn][maxm];bool flag[maxd][maxn][maxm];int dx[] = &#123;0,1,0,-1,0,0&#125;;int dy[] = &#123;1,0,-1,0,0,0&#125;;int dz[] = &#123;0,0,0,0,1,-1&#125;;int tx,ty,tz;int num; void dfs(int x,int y,int z)&#123; for(int i =0 ;i &lt; 6;i ++) &#123; tx = x + dx[i];ty = y + dy[i];tz = z + dz[i]; if( tx &gt;= 0 &amp;&amp; tx &lt; l &amp;&amp; ty &gt;= 0 &amp;&amp; ty &lt; m &amp;&amp; tz &gt;= 0 &amp;&amp; tz &lt; n &amp;&amp; !flag[tx][ty][tz] &amp;&amp; mapp[tx][ty][tz]) &#123;// cout &lt;&lt; x &lt;&lt; " * " &lt;&lt; y &lt;&lt; " * "&lt;&lt; z &lt;&lt; " * " &lt;&lt; tx &lt;&lt; " "&lt;&lt; ty &lt;&lt; " "&lt;&lt; tz &lt;&lt; endl; flag[tx][ty][tz] = 1; num ++; dfs(tx,ty,tz); &#125; &#125; return ;&#125; int main()&#123; scanf("%d%d%d%d",&amp;m,&amp;n,&amp;l,&amp;k); for(int i = 0;i &lt; l;i ++) for(int j = 0;j &lt; m;j ++) for(int z = 0;z &lt; n;z ++)&#123; scanf("%d",&amp;mapp[i][j][z]); &#125; int ans = 0; for(int i = 0;i &lt; l;i ++) for(int j = 0;j &lt; m;j ++) for(int z = 0;z &lt; n;z ++) if(!flag[i][j][z] &amp;&amp; mapp[i][j][z]) &#123; num = 1; flag[i][j][z] = 1; dfs(i,j,z);// cout &lt;&lt; " num = "&lt;&lt; num &lt;&lt; endl; if(num &gt;= k) ans += num; &#125; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>BFS</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT_1110]]></title>
    <url>%2F%2FPAT%2Fcjsjsbf8o0005csv9qbba8753%2F</url>
    <content type="text"><![CDATA[1110 Complete Binary Tree题目描述Given a tree, you are supposed to tell if it is a complete binary tree. Input Specification:Each input file contains one test case. For each case, the first line gives a positive integer N (≤20) which is the total number of nodes in the tree – and hence the nodes are numbered from 0 to N−1. Then N lines follow, each corresponds to a node, and gives the indices of the left and right children of the node. If the child does not exist, a - will be put at the position. Any pair of children are separated by a space. Output Specification:For each case, print in one line YES and the index of the last node if the tree is a complete binary tree, or NO and the index of the root if not. There must be exactly one space separating the word and the number. Sample Input 1:1234567891097 8- -- -- -0 12 34 5- -- - Sample Output 1:1YES 8 Sample Input 2:1234567898- -4 50 6- -2 3- 7- -- - Sample Output 2:1NO 1 思路本题给出每个节点的子节点，要求判断此树是否为完全二叉树 思路一第一种思路是使用BFS，最直接的思路判断是否为完全二叉树，依次向下遍历节点，总共分为四种类型的节点： 既包含左子节点又包含右子节点、只包含左子节点、只包含右子节点、以及不包含子节点 其中只要出现只包含右子节点的情况，就表明一定不是完全二叉树，当出现只包含左子节点或者不包含子节点的情况，就表明后面（按照层次遍历的顺序）的节点都是叶子节点，即能为不包含子节点的情况 思路二第二种思路为，按照层次遍历的顺序（如果不存在节点，也要进行遍历），当出现不是节点的时候，判断遍历节点的个数，如果等于给定的n，那么表明为此树为完全二叉树，如果不等于n，则表明不是完全二叉树 程序思路一 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;cmath&gt;#define INF 0x3f3f3f3fusing namespace std;const int maxn = 20+5;int _left[maxn],_right[maxn],root,n;bool use[maxn];pair&lt;bool,int&gt; Judge(int root)&#123; pair&lt;bool,int&gt; ans; bool leaf = false; queue&lt;int&gt; q; q.push(root); int p;bool left = false; while(!q.empty()) &#123; p = q.front(); q.pop(); if((left &amp;&amp; (_left[p] != -1 || _right[p] != -1)) || (_left[p] == -1 &amp;&amp; _right[p] != -1)) &#123; ans.first = false; ans.second = 0; return ans; &#125; if(_left[p] != -1) q.push(_left[p]); if(_right[p] != -1) q.push(_right[p]); if((_left[p] != -1 &amp;&amp; _right[p] == -1) || (_left[p] == -1 &amp;&amp; _right[p] == -1)) left = true; //表示该节点之后的节点都必须为叶子节点 &#125; ans.first = true; ans.second = p; return ans;&#125;int main()&#123; memset(_left,-1,sizeof(_left)); memset(_right,-1,sizeof(_right)); string x,y; scanf("%d",&amp;n); for(int i = 0;i &lt; n;i ++) &#123; cin &gt;&gt;x &gt;&gt; y; if(x != "-") _left[i] = stoi(x),use[stoi(x)] = 1; if(y != "-") _right[i] = stoi(y),use[stoi(y)] = 1; &#125; for(int i =0 ;i &lt; n;i ++) if(!use[i]) &#123; root = i;break; &#125; pair&lt;bool,int&gt; p = Judge(root); if(p.first == true) printf("YES %d\n",p.second); else printf("NO %d\n",root); return 0;&#125; 思路二 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;cmath&gt;#define INF 0x3f3f3f3fusing namespace std;const int maxn = 25;int _left[maxn],_right[maxn],root,n;bool use[maxn];void Judge(int root)&#123; queue&lt;int&gt; q; q.push(root); int p,num = 0,last; while(!q.empty()) &#123; p = q.front(); q.pop(); if(p == -1) &#123; if(num == n) printf("YES %d\n",last); else printf("NO %d\n",root); return ; &#125; else last = p,num ++; q.push(_left[p]); q.push(_right[p]); &#125; return ;&#125;int main()&#123; memset(use,false,sizeof(use)); memset(_left,-1,sizeof(_left)); memset(_right,-1,sizeof(_right)); string x,y; cin &gt;&gt; n; for(int i = 0;i &lt; n;i ++) &#123; cin &gt;&gt;x&gt;&gt;y; if(x != "-") _left[i] = stoi(x),use[stoi(x)] = 1; if(y != "-") _right[i] = stoi(y),use[stoi(y)] = 1; &#125; for(int i = 0 ;i &lt; n;i ++) if(!use[i]) &#123; root = i;break; &#125; Judge(root); return 0;&#125; 参考博客判断一个二叉树是否为完全二叉树]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>BFS</tag>
        <tag>完全二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT_1109]]></title>
    <url>%2F%2FPAT%2Fcjsjsbfgm000zcsv9mdwrj5r2%2F</url>
    <content type="text"><![CDATA[1109 Group Photo题目描述Formation is very important when taking a group photo. Given the rules of forming K rows with N people as the following: The number of people in each row must be N/K (round down to the nearest integer), with all the extra people (if any) standing in the last row; All the people in the rear row must be no shorter than anyone standing in the front rows; In each row, the tallest one stands at the central position (which is defined to be the position (m/2+1), where m is the total number of people in that row, and the division result must be rounded down to the nearest integer); In each row, other people must enter the row in non-increasing order of their heights, alternately taking their positions first to the right and then to the left of the tallest one (For example, given five people with their heights 190, 188, 186, 175, and 170, the final formation would be 175, 188, 190, 186, and 170. Here we assume that you are facing the group so your left-hand side is the right-hand side of the one at the central position.); When there are many people having the same height, they must be ordered in alphabetical (increasing) order of their names, and it is guaranteed that there is no duplication of names. Now given the information of a group of people, you are supposed to write a program to output their formation. Input Specification:Each input file contains one test case. For each test case, the first line contains two positive integers N (≤104), the total number of people, and K (≤10), the total number of rows. Then N lines follow, each gives the name of a person (no more than 8 English letters without space) and his/her height (an integer in [30, 300]). Output Specification:For each case, print the formation – that is, print the names of people in K lines. The names must be separated by exactly one space, but there must be no extra space at the end of each line. Note: since you are facing the group, people in the rear rows must be printed above the people in the front rows. Sample Input:123456789101110 3Tom 188Mike 170Eva 168Tim 160Joe 190Ann 168Bob 175Nick 186Amy 160John 159 Sample Output:123Bob Tom Joe NickAnn Mike EvaTim Amy John 思路按照身高对人进行排序，如果身高相同，则根据名字进行排序，给出人的数量以及要排列的行数，假设n行，一共m人，前n-1行，每行m/n人，剩余全部安排在第n行，每一行中最高的放在（m/n/2 + 1）位置处，然后根据高度排序依次向其左右安排人站的位置 只需要sort进行排序后，模拟一下这个过程即可 程序12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;cmath&gt;#define INF 0x3f3f3f3fusing namespace std;const int maxn = 1e4+5;struct People&#123; string name; int height; bool operator &lt; (const People &amp; a)const &#123; if(a.height == height) return name &lt; a.name; return height &gt; a.height; &#125;&#125;peo[maxn];int n,k;string ans[maxn];int main()&#123; scanf("%d%d",&amp;n,&amp;k); for(int i =0 ;i &lt; n;i ++) cin &gt;&gt; peo[i].name &gt;&gt; peo[i].height; sort(peo,peo+n);// for(int i =0 ;i &lt; n;i ++)// cout &lt;&lt; peo[i].name&lt;&lt;" "&lt;&lt;peo[i].height&lt;&lt;endl; int num = n - (n/k)*k + n/k , rows = k,index = 0; int left,right; while(rows --) &#123; int pos = num/2 + 1 , Parity = 0,_tmp = index; left = pos - 1;right = pos + 1; ans[pos] = peo[index++].name; for(;index &lt; _tmp + num;index ++) &#123; if(Parity % 2 == 0) ans[left--] = peo[index].name; else ans[right++] = peo[index].name; Parity ++; &#125; cout &lt;&lt; ans[left+1]; for(int i =left+2 ;i &lt; right;i ++) cout &lt;&lt;" "&lt;&lt;ans[i]; cout &lt;&lt; endl; num = n/k; &#125;&#125;]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT—_1137]]></title>
    <url>%2F%2FPAT%2Fcjsjsbfh2001ccsv9jmntqchd%2F</url>
    <content type="text"><![CDATA[1137 Final Grading 题目描述For a student taking the online course “Data Structures” on China University MOOC (http://www.icourse163.org/), to be qualified for a certificate, he/she must first obtain no less than 200 points from the online programming assignments, and then receive a final grade no less than 60 out of 100. The final grade is calculated by G=(Gmid−term×40%+Gfinal×60%) if Gmid−term&gt;Gfinal, or Gfinal will be taken as the final grade G. Here Gmid−term and Gfinal are the student’s scores of the mid-term and the final exams, respectively. The problem is that different exams have different grading sheets. Your job is to write a program to merge all the grading sheets into one. Input Specification:Each input file contains one test case. For each case, the first line gives three positive integers: P , the number of students having done the online programming assignments; M, the number of students on the mid-term list; and N, the number of students on the final exam list. All the numbers are no more than 10,000. Then three blocks follow. The first block contains P online programming scores Gp’s; the second one contains M mid-term scores Gmid−term’s; and the last one contains N final exam scores Gfinal’s. Each score occupies a line with the format: StudentID Score, where StudentID is a string of no more than 20 English letters and digits, and Score is a nonnegative integer (the maximum score of the online programming is 900, and that of the mid-term and final exams is 100). Output Specification:For each case, print the list of students who are qualified for certificates. Each student occupies a line with the format: StudentID Gp Gmid−term Gfinal G If some score does not exist, output “−1” instead. The output must be sorted in descending order of their final grades (G must be rounded up to an integer). If there is a tie, output in ascending order of their StudentID‘s. It is guaranteed that the StudentID‘s are all distinct, and there is at least one qullified student. Sample Input:12345678910111213141516171819206 6 701234 880a1903 199ydjh2 200wehu8 300dx86w 220missing 400ydhfu77 99wehu8 55ydjh2 98dx86w 88a1903 8601234 39ydhfu77 88a1903 6601234 58wehu8 84ydjh2 82missing 99dx86w 81 Sample Output:1234missing 400 -1 99 99ydjh2 200 98 82 88dx86w 220 88 81 84wehu8 300 55 84 84 思路注意：只有当成绩不存在的时候，输出‘-1’，当成绩为0时，需要继续输出0 可以推断出，只有当编程成绩大于200时，成绩才会有效，所以我们将编程成绩小于200的学生放在数组0处，不予以编号 计算最后成绩时，四舍五入直接在double基础上+0.5，自动准换为int即可 程序12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;queue&gt;#include &lt;map&gt;#define INF 0x3f3f3f3fusing namespace std;const int maxn = 1e4+5;int n,m,k;map&lt;string,int&gt; namemap;string namelist[maxn];struct Rank&#123; int Gp,Gm,Gf,pos; int tot; Rank() &#123; Gp=Gm=Gf=-1; &#125; bool operator&lt;(const Rank&amp;a) const &#123; if(tot == a.tot) return namelist[pos] &lt; namelist[a.pos]; return tot &gt; a.tot; &#125;&#125;ranklist[maxn];int main()&#123; string name; int score; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); int index = 1; for(int i =0 ;i &lt; n;i ++) &#123; cin &gt;&gt; name &gt;&gt; score; if(score &gt;= 200) &#123; if(namemap[name] == 0) namemap[name] = index,namelist[index++] = name; ranklist[namemap[name]].pos = namemap[name]; ranklist[namemap[name]].Gp = score; &#125; &#125; for(int i =0 ;i &lt; m;i ++) &#123; cin &gt;&gt; name &gt;&gt; score; ranklist[namemap[name]].pos = namemap[name]; ranklist[namemap[name]].Gm = score; &#125; for(int i =0 ;i &lt; k;i ++) &#123; cin &gt;&gt; name &gt;&gt; score; int pos = namemap[name]; if(pos != 0) &#123; ranklist[pos].pos = pos; ranklist[pos].Gf = score; if(ranklist[pos].Gf &gt;= ranklist[pos].Gm) ranklist[pos].tot = ranklist[pos].Gf; else ranklist[pos].tot = (double)ranklist[pos].Gm * 0.4 + (double)ranklist[pos].Gf*0.6 + 0.5; &#125; &#125; sort(ranklist+1,ranklist+index); for(int i = 1;i &lt; index;i ++) &#123; if(ranklist[i].tot &gt;= 60) &#123; cout &lt;&lt; namelist[ranklist[i].pos] &lt;&lt; " "&lt;&lt;ranklist[i].Gp&lt;&lt; " "&lt;&lt;ranklist[i].Gm&lt;&lt; " "&lt;&lt;ranklist[i].Gf&lt;&lt;" "&lt;&lt;ranklist[i].tot&lt;&lt;endl; &#125; &#125;&#125;]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>sort</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT_1133]]></title>
    <url>%2F%2FPAT%2Fcjsjsbfm40027csv9vkm8eb5n%2F</url>
    <content type="text"><![CDATA[1133 Splitting A Linked List题目描述Given a singly linked list, you are supposed to rearrange its elements so that all the negative values appear before all of the non-negatives, and all the values in [0, K] appear before all those greater than K. The order of the elements inside each class must not be changed. For example, given the list being 18→7→-4→0→5→-6→10→11→-2 and K being 10, you must output -4→-6→-2→7→0→5→10→18→11. Input Specification:Each input file contains one test case. For each case, the first line contains the address of the first node, a positive N (≤105) which is the total number of nodes, and a positive K (≤103). The address of a node is a 5-digit nonnegative integer, and NULL is represented by −1. Then N lines follow, each describes a node in the format: 1Address Data Next where Address is the position of the node, Data is an integer in [−105,105], and Next is the position of the next node. It is guaranteed that the list is not empty. Output Specification:For each case, output in order (from beginning to the end of the list) the resulting linked list. Each node occupies a line, and is printed in the same format as in the input. Sample Input:1234567891000100 9 1023333 10 2777700000 0 9999900100 18 1230968237 -6 2333333218 -4 0000048652 -2 -199999 5 6823727777 11 4865212309 7 33218 Sample Output:12345678933218 -4 6823768237 -6 4865248652 -2 1230912309 7 0000000000 0 9999999999 5 2333323333 10 0010000100 18 2777727777 11 -1 思路可以发现，将所有节点分为三部分，首先是小于0，第二部分为大于等于0且小于等于k，第三部分为大于k的，我们需要将相同部分交换到相邻位置，可以直接使用三个queue来进行模拟即可 程序123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;queue&gt;#include &lt;map&gt;#define INF 0x3f3f3f3fusing namespace std;const int maxn = 1e5+5;struct Node&#123; int add,date,next;&#125;node[maxn];int add,N,K;int mapp[maxn];queue&lt;int&gt; negative,small,last;int main()&#123; scanf("%d%d%d",&amp;add,&amp;N,&amp;K); for(int i =0 ;i &lt; N;i ++) &#123; scanf("%d%d%d",&amp;node[i].add,&amp;node[i].date,&amp;node[i].next); mapp[node[i].add] = i; &#125; int k = add; while(k != -1) &#123; if(node[mapp[k]].date &lt; 0) negative.push(node[mapp[k]].add); else &#123; if(node[mapp[k]].date &lt;= K) small.push(node[mapp[k]].add); else last.push(node[mapp[k]].add); &#125; k = node[mapp[k]].next; &#125; Node tmp; bool flag = false;; while(!negative.empty()) &#123; tmp = node[mapp[negative.front()]];negative.pop(); if(!flag) printf("%05d %d",tmp.add,tmp.date),flag = true; else printf(" %05d\n",tmp.add),printf("%05d %d",tmp.add,tmp.date); &#125; while(!small.empty()) &#123; tmp = node[mapp[small.front()]];small.pop(); if(!flag) printf("%05d %d",tmp.add,tmp.date),flag = true; else printf(" %05d\n",tmp.add),printf("%05d %d",tmp.add,tmp.date); &#125; while(!last.empty()) &#123; tmp = node[mapp[last.front()]];last.pop(); if(!flag) printf("%05d %d",tmp.add,tmp.date),flag = true; else printf(" %05d\n",tmp.add),printf("%05d %d",tmp.add,tmp.date); &#125; printf(" -1\n"); return 0;&#125;]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>STL</tag>
        <tag>queue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT_1094]]></title>
    <url>%2F%2FPAT%2Fcjsjsbf8q0006csv9t6hmdzkh%2F</url>
    <content type="text"><![CDATA[1094 The Largest Generation题目描述A family hierarchy is usually presented by a pedigree tree where all the nodes on the same level belong to the same generation. Your task is to find the generation with the largest population. Input Specification:Each input file contains one test case. Each case starts with two positive integers N (&lt;100) which is the total number of family members in the tree (and hence assume that all the members are numbered from 01 to N), and M (&lt;N) which is the number of family members who have children. Then M lines follow, each contains the information of a family member in the following format: 1ID K ID[1] ID[2] ... ID[K] where ID is a two-digit number representing a family member, K (&gt;0) is the number of his/her children, followed by a sequence of two-digit ID‘s of his/her children. For the sake of simplicity, let us fix the root ID to be 01. All the numbers in a line are separated by a space. Output Specification:For each test case, print in one line the largest population number and the level of the corresponding generation. It is assumed that such a generation is unique, and the root level is defined to be 1. Sample Input:123456789101112131423 1321 1 2301 4 03 02 04 0503 3 06 07 0806 2 12 1313 1 2108 2 15 1602 2 09 1011 2 19 2017 1 2205 1 1107 1 1409 1 1710 1 18 Sample Output:19 4 思路给出树中每个节点的子节点，并且根节点为01，求解树中包含节点最多的一层以及节点数量 在跟节点开始，BFS向深处遍历，即可得到每一层包含的节点，判断出包含最多的一层即可 程序1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;queue&gt;#include &lt;map&gt;#define INF 0x3f3f3f3fusing namespace std;const int maxn = 110;const int mod = 1000000007;typedef long long ll;vector&lt;int&gt; ch[maxn];int n,m,num[maxn],maxdeep;struct Node&#123; int pos,deep;&#125;;void BFS()&#123; Node node&#123;1,1&#125;,tmp; queue&lt;Node&gt; que; que.push(node); while(!que.empty()) &#123; node = que.front();que.pop(); num[node.deep] += 1; maxdeep = max(maxdeep,node.deep); for(int i = 0;i &lt; ch[node.pos].size();i ++) &#123; tmp.pos = ch[node.pos][i]; tmp.deep = node.deep + 1; que.push(tmp); &#125; &#125;&#125;int main()&#123; int id,k,x; scanf("%d%d",&amp;n,&amp;m); for(int i =0 ;i &lt; m;i ++) &#123; scanf("%d%d",&amp;id,&amp;k); for(int j =0 ;j &lt; k;j ++) &#123; scanf("%d",&amp;x); ch[id].push_back(x); &#125; &#125; BFS(); int a = 0,b; for(int i =0 ;i &lt;= maxdeep;i ++) if(num[i] &gt; a) a = num[i],b = i; printf("%d %d\n",a,b); return 0;&#125;]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT_1093]]></title>
    <url>%2F%2FPAT%2Fcjsjsbf8m0004csv9zdxlib31%2F</url>
    <content type="text"><![CDATA[1093 Count PAT’s题目描述The string APPAPT contains two PAT‘s as substrings. The first one is formed by the 2nd, the 4th, and the 6th characters, and the second one is formed by the 3rd, the 4th, and the 6th characters. Now given any string, you are supposed to tell the number of PAT‘s contained in the string. Input Specification:Each input file contains one test case. For each case, there is only one line giving a string of no more than 105 characters containing only P, A, or T. Output Specification:For each test case, print in one line the number of PAT‘s contained in the string. Since the result may be a huge number, you only have to output the result moded by 1000000007. Sample Input:1APPAPT Sample Output:12 思路求出一个字符串中所包含的连续或不连续的子串”PAT”的个数， 首先想到的是遍历字符串中的P，然后确定A，最后寻找T，确定前面两个，子串个数为A位置后面T字符的个数，但是这样的思路，时间复杂度为O(n^2)，时间应该会超限 既然确定P时间复杂度很高，我们可以确定中间的A，做一次预处理，求出A位置之前的P出现的次数，A位置之后T出现的次数，这样将两个出现的次数相乘，即可确定当前中间A固定的子串PAT的个数 程序1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;queue&gt;#include &lt;map&gt;#define INF 0x3f3f3f3fusing namespace std;const int maxn = 1e5+10;const int mod = 1000000007;typedef long long ll;string s;int p[maxn],t[maxn];int main()&#123; cin &gt;&gt; s; int len = s.length(); if(s[0] == 'P') p[0] = 1; if(s[0] == 'T') t[0] = 1; for(int i = 1;i &lt; len;i ++) &#123; if(s[i] == 'P') p[i] = p[i-1] + 1,t[i] = t[i-1]; else if(s[i] == 'T') t[i] = t[i-1] + 1,p[i] = p[i-1]; else t[i] = t[i-1],p[i] = p[i-1]; &#125; int num_t = t[len-1]; int ans = 0; for(int i = 0;i &lt; len;i ++) &#123; if(s[i] == 'A') &#123; ans += (p[i] * (num_t - t[i])) % mod; ans %= mod; &#125; &#125; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT_1146]]></title>
    <url>%2F%2FPAT%2Fcjsjsbfh6001fcsv91wr5n87a%2F</url>
    <content type="text"><![CDATA[1146 Topological Order题目描述1146 Topological Order （25 分） This is a problem given in the Graduate Entrance Exam in 2018: Which of the following is NOT a topological order obtained from the given directed graph? Now you are supposed to write a program to test each of the options. Input Specification:Each input file contains one test case. For each case, the first line gives two positive integers N (≤ 1,000), the number of vertices in the graph, and M (≤ 10,000), the number of directed edges. Then M lines follow, each gives the start and the end vertices of an edge. The vertices are numbered from 1 to N. After the graph, there is another positive integer K (≤ 100). Then K lines of query follow, each gives a permutation of all the vertices. All the numbers in a line are separated by a space. Output Specification:Print in a line all the indices of queries which correspond to “NOT a topological order”. The indices start from zero. All the numbers are separated by a space, and there must no extra space at the beginning or the end of the line. It is graranteed that there is at least one answer. Sample Input:1234567891011121314156 81 21 35 25 42 32 63 46 451 5 2 3 6 45 1 2 6 3 45 1 2 3 6 45 2 1 6 3 41 2 3 4 5 6 Sample Output:13 4 思路要求判断给出的每一个序列是否符合拓扑序列 ，要解决这个问题首先要知道拓扑排序怎么计算 拓扑排序首先我们将有向图的每一个节点的入度计算出来，找出入度为0的节点，表示没有节点必须要出现在它前面（即可以将此节点作为下一个输出的节点，这里我们就可以得到拓扑排序的答案不是唯一的），并且将以此节点指向的节点的入度进行-1，依次向下判断则得出拓扑排序 现在我们将上诉过程变更为判断性的即可 程序12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;queue&gt;#include &lt;map&gt;#define INF 0x3f3f3f3fusing namespace std;const int maxn = 1e3+10;typedef long long ll;int n,m,k,_in[maxn],order[maxn];vector&lt;int&gt; edge[maxn],ans;bool Judge()&#123; int tmp[maxn]; for(int i =1 ;i &lt;= n;i ++) tmp[i] = _in[i]; for(int i =1 ;i &lt;= n;i ++) &#123; if(tmp[order[i]] != 0) return false; else &#123; for(int j = 0;j &lt; edge[order[i]].size();j ++) tmp[edge[order[i]][j]] --; &#125; &#125; return true;&#125;int main()&#123; int x,y; scanf("%d%d",&amp;n,&amp;m); for(int i =0 ;i &lt; m;i ++) &#123; scanf("%d%d",&amp;x,&amp;y); _in[y] ++; edge[x].push_back(y); &#125; scanf("%d",&amp;k); for(int i =0 ;i &lt; k;i ++) &#123; for(int j =1 ;j &lt;= n;j ++) scanf("%d",order+j); if(!Judge()) ans.push_back(i); &#125; for(int i =0 ;i &lt; ans.size();i ++) printf("%d%c",ans[i],i==ans.size()-1?'\n':' '); return 0;&#125;]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>拓扑排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT_1144]]></title>
    <url>%2F%2FPAT%2Fcjsjsbfh8001icsv9ewk286ej%2F</url>
    <content type="text"><![CDATA[1144 The Missing Number 题目描述1144 The Missing Number （20 分） Given N integers, you are supposed to find the smallest positive integer that is NOT in the given list. Input Specification:Each input file contains one test case. For each case, the first line gives a positive integer N (≤105). Then N integers are given in the next line, separated by spaces. All the numbers are in the range of int. Output Specification:Print in a line the smallest positive integer that is missing from the input list. Sample Input:12105 -25 9 6 1 3 4 2 5 17 Sample Output:17 思路寻找不出现在列表中的最小的数字，那么直接暴力判断有没有出现在列表中即可 程序123456789101112131415161718192021222324252627282930#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;queue&gt;#include &lt;map&gt;#define INF 0x3f3f3f3fusing namespace std;const int maxn = 1e5+5;typedef long long ll;int a[maxn],n;int main()&#123; scanf("%d",&amp;n); for(int i =0 ;i &lt; n;i ++) scanf("%d",a+i); int index = 0; sort(a,a+n); for(int i =1 ;i &lt; maxn;i ++) if(*lower_bound(a,a+n,i) != i) &#123; printf("%d\n",i); return 0; &#125;&#125;]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT_1118]]></title>
    <url>%2F%2FPAT%2Fcjsjsbfh00018csv9428nhc5b%2F</url>
    <content type="text"><![CDATA[1118 Birds in Forest （25 分）题目描述Some scientists took pictures of thousands of birds in a forest. Assume that all the birds appear in the same picture belong to the same tree. You are supposed to help the scientists to count the maximum number of trees in the forest, and for any pair of birds, tell if they are on the same tree. Input Specification:Each input file contains one test case. For each case, the first line contains a positive number N (≤104) which is the number of pictures. Then N lines follow, each describes a picture in the format: K B1 B2 … BK where K is the number of birds in this picture, and Bi’s are the indices of birds. It is guaranteed that the birds in all the pictures are numbered continuously from 1 to some number that is no more than 104. After the pictures there is a positive number Q (≤104) which is the number of queries. Then Q lines follow, each contains the indices of two birds. Output Specification:For each test case, first output in a line the maximum possible number of trees and the number of birds. Then for each query, print in a line Yes if the two birds belong to the same tree, or No if not. Sample Input:1234567843 10 1 22 3 44 1 5 7 83 9 6 4210 53 7 Sample Output:1232 10YesNo 思路题目指出，出现在同一张图片中的鸟则表示在一棵树上，那么每一行表示出现在同一张图片中鸟的编号，要求判断一共多少棵树以及多少只鸟，并且任意给出两个鸟的编号，判断是否在同一颗树上面 并查集的思路为：以每一棵树中第一个出现的鸟为父节点，后面所有的鸟为子节点，做出一棵树，并且更新per数组，那么这样做过所有照片，则所有的鸟就做出了一棵树，判断每一只鸟对应的per数组是否等于其编号，如果相等，则表示它及它的子节点在同一颗树上，这样计算树的个数即可 程序1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;queue&gt;#include &lt;cmath&gt;#include &lt;map&gt;#define INF 0x3f3f3f3fusing namespace std;const int maxn = 1e4+5;int n,belong[maxn];set&lt;int&gt; all;int per[maxn];int Find(int x)&#123; return x == per[x]?x:per[x] = Find(per[x]);&#125;void Init()&#123; for(int i = 1;i &lt; maxn;i ++) per[i] = i;&#125;void Union(int x,int y)&#123; x = Find(x); y = Find(y); if(x != y) per[y] = x;&#125;int main()&#123; Init(); int num,x,y,head; scanf("%d",&amp;n); int index = 1; for(int i =0 ;i &lt; n;i ++) &#123; scanf("%d",&amp;num); scanf("%d",&amp;head); all.insert(head); for(int j = 0;j &lt; num-1;j ++) &#123; scanf("%d",&amp;y); Union(head,y); all.insert(y); &#125; &#125; int ans = 0; for(int i = 1;i &lt;= all.size();i ++) if(Find(i) == i) ans ++; printf("%d %d\n",ans,all.size()); scanf("%d",&amp;n); while(n--) &#123; scanf("%d%d",&amp;x,&amp;y); if(Find(x) == Find(y)) printf("Yes\n"); else printf("No\n"); &#125; return 0;&#125; 参考博客1118 Birds in Forest（25 分）]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT_1116]]></title>
    <url>%2F%2FPAT%2Fcjsjsbfgy0016csv9qvbcp1kh%2F</url>
    <content type="text"><![CDATA[1116 Come on! Let’s C （20 分）题目描述“Let’s C” is a popular and fun programming contest hosted by the College of Computer Science and Technology, Zhejiang University. Since the idea of the contest is for fun, the award rules are funny as the following: 0、 The Champion will receive a “Mystery Award” (such as a BIG collection of students’ research papers…). 1、 Those who ranked as a prime number will receive the best award – the Minions (小黄人)! 2、 Everyone else will receive chocolates. Given the final ranklist and a sequence of contestant ID’s, you are supposed to tell the corresponding awards. Input Specification:Each input file contains one test case. For each case, the first line gives a positive integer N (≤104), the total number of contestants. Then N lines of the ranklist follow, each in order gives a contestant’s ID (a 4-digit number). After the ranklist, there is a positive integer K followed by K query ID’s. Output Specification:For each query, print in a line ID: award where the award is Mystery Award, or Minion, or Chocolate. If the ID is not in the ranklist, print Are you kidding? instead. If the ID has been checked before, print ID: Checked. Sample Input:123456789101112131461111666688881234555500016888800011111222288882222 Sample Output:1234568888: Minion0001: Chocolate1111: Mystery Award2222: Are you kidding?8888: Checked2222: Are you kidding? 思路直接根据题目中的要求进行模拟即可 首先根据排名给出选手的id，第一名会获得 Mystery Award，排名为素数的会获得Minion,其余则获得Chocolate,如果查询的id没有再排名中给出，则输出Are you kidding?，如果后面重复查询某个选手所获得的奖励则输出Checked 程序12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;queue&gt;#include &lt;cmath&gt;#include &lt;map&gt;#define INF 0x3f3f3f3fusing namespace std;const int maxn = 1e5+5;const int maxm = 1e4+5;typedef long long ll;int n,k,ranks[maxn];bool used[maxn];bool Judge(int x)&#123; for(int i = 2;i*i &lt;= x ;i ++) if(x % i == 0) return false; return true;&#125;int main()&#123; int x; scanf("%d",&amp;n); for(int i =1 ;i &lt;= n;i ++) scanf("%d",&amp;x),ranks[x] = i; scanf("%d",&amp;k); for(int i = 0;i &lt; k;i ++) &#123; scanf("%d",&amp;x); if(ranks[x] == 0) printf("%04d: Are you kidding?\n",x); else if(used[x]) printf("%04d: Checked\n",x); else &#123; if(ranks[x] == 1) printf("%04d: Mystery Award\n",x); else if(Judge(ranks[x])) printf("%04d: Minion\n",x); else printf("%04d: Chocolate\n",x); used[x] = 1; &#125; &#125;&#125; 写在后面本题可以使用简单的方法进行素数判定，如果需要判断某区间内所有素数，那么可以使用Euler筛法]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>Euler筛法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT_1122]]></title>
    <url>%2F%2FPAT%2Fcjsjsbfgo0011csv9so0icul6%2F</url>
    <content type="text"><![CDATA[1122 Hamiltonian CycleThe “Hamilton cycle problem” is to find a simple cycle that contains every vertex in a graph. Such a cycle is called a “Hamiltonian cycle”. In this problem, you are supposed to tell if a given cycle is a Hamiltonian cycle. Input Specification:Each input file contains one test case. For each case, the first line contains 2 positive integers N (2&lt;N≤200), the number of vertices, and M, the number of edges in an undirected graph. Then M lines follow, each describes an edge in the format Vertex1 Vertex2, where the vertices are numbered from 1 to N. The next line gives a positive integer K which is the number of queries, followed by K lines of queries, each in the format: n V1 V2 … Vn where n is the number of vertices in the list, and Vi’s are the vertices on a path. Output Specification:For each query, print in a line YES if the path does form a Hamiltonian cycle, or NO if not. Sample Input:1234567891011121314151617186 106 23 41 52 53 14 11 66 31 24 567 5 1 4 3 6 2 56 5 1 4 3 6 29 6 2 1 6 3 4 5 2 64 1 2 5 17 6 1 3 4 5 2 67 6 1 2 5 4 3 1 Sample Output:123456YESNONONOYESNO 思路要求判断给出的路径是否为哈密顿回路，那么哈密顿回路应该满足： 满足回路，即路径首尾相同 经过所有节点且经过一次 路径必须是连通的，即路径中相邻节点必须有路 程序1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465 #include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;queue&gt;#include &lt;cmath&gt;#include &lt;map&gt;#define INF 0x3f3f3f3fusing namespace std;const int maxn = 205;typedef long long ll;int n,m,mapp[maxn][maxn],k,path[maxn*2];bool used[maxn*2];bool Judge(int z)&#123; int num = 0; for(int i = 0;i &lt; z;i ++) if(!used[path[i]]) used[path[i]] = true,num ++; return num == n &amp;&amp; z == n+1;&#125;int main()&#123; int x,y,z; scanf("%d%d",&amp;n,&amp;m); for(int i =0 ;i &lt; m;i ++) &#123; scanf("%d%d",&amp;x,&amp;y); mapp[x][y] = mapp[y][x] = 1; &#125; scanf("%d",&amp;k); for(int i =0 ;i &lt; k;i ++) &#123; scanf("%d",&amp;z); memset(used,false,sizeof(used)); for(int j = 0;j &lt; z;j ++) scanf("%d",path+j); bool flag = true; if(path[0] == path[z-1] &amp;&amp; Judge(z)) &#123; for(int j = 1;j &lt; z;j ++) &#123; if(mapp[path[j]][path[j-1]] == 0) &#123; flag = false; break; &#125; &#125; &#125; else &#123; flag = false; &#125; if(flag) printf("YES\n"); else printf("NO\n"); &#125; return 0;&#125; 参考资料​ 哈密顿回路 -百度百科]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>哈密顿回路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT_1121]]></title>
    <url>%2F%2FPAT%2Fcjsjsbfgt0014csv9skdmoviq%2F</url>
    <content type="text"><![CDATA[1121 Damn Single题目描述“Damn Single (单身狗)” is the Chinese nickname for someone who is being single. You are supposed to find those who are alone in a big party, so they can be taken care of. Input Specification:Each input file contains one test case. For each case, the first line gives a positive integer N (≤ 50,000), the total number of couples. Then N lines of the couples follow, each gives a couple of ID’s which are 5-digit numbers (i.e. from 00000 to 99999). After the list of couples, there is a positive integer M (≤ 10,000) followed by M ID’s of the party guests. The numbers are separated by spaces. It is guaranteed that nobody is having bigamous marriage (重婚) or dangling with more than one companion. Output Specification:First print in a line the total number of lonely guests. Then in the next line, print their ID’s in increasing order. The numbers must be separated by exactly 1 space, and there must be no extra space at the end of the line. Sample Input:123456311111 2222233333 4444455555 66666755555 44444 10000 88888 22222 11111 23333 Sample Output:12510000 23333 44444 55555 88888 思路题目中给出n对夫妇，然后给出m个来聚会的人，找出来聚会中单身的人，如果情侣没有来，那么也算单身 可以使用map存储上面的夫妇信息，也可以直接使用数组进行保存， 然后再来聚会的人中，依次遍历，如果不存在伴侣则直接保存到另一个vector中，否则判断自己的情侣有没有来 程序1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;queue&gt;#include &lt;cmath&gt;#include &lt;map&gt;#define INF 0x3f3f3f3fusing namespace std;const int maxn = 100000;typedef long long ll;int couple[maxn],x;bool come[maxn];vector&lt;int&gt; ans,wait;int main()&#123; fill(couple,couple+maxn,-1); int n,m,a,b; scanf("%d",&amp;n); for(int i = 0;i &lt; n;i ++) &#123; scanf("%d%d",&amp;a,&amp;b); couple[a] = b;couple[b] = a; &#125; scanf("%d",&amp;m); for(int i =0 ;i &lt; m;i ++) &#123; scanf("%d",&amp;x); if(couple[x] == -1) ans.push_back(x); else wait.push_back(x),come[x] = 1; &#125; for(int i = 0;i &lt; wait.size();i ++) if(!come[couple[wait[i]]]) ans.push_back(wait[i]); sort(ans.begin(),ans.end()); printf("%d\n",ans.size()); for(int i = 0;i &lt; ans.size();i ++) printf("%05d%c",ans[i],i==ans.size()-1?'\n':' '); return 0;&#125;]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>vector</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT_1090]]></title>
    <url>%2F%2FPAT%2Fcjsjsbf8f0001csv9tbnuez3t%2F</url>
    <content type="text"><![CDATA[1090 Highest Price in Supply Chain题目描述A supply chain is a network of retailers（零售商）, distributors（经销商）, and suppliers（供应商）– everyone involved in moving a product from supplier to customer. Starting from one root supplier, everyone on the chain buys products from one’s supplier in a price P and sell or distribute them in a price that is r% higher than P. It is assumed that each member in the supply chain has exactly one supplier except the root supplier, and there is no supply cycle. Now given a supply chain, you are supposed to tell the highest price we can expect from some retailers. Input Specification:Each input file contains one test case. For each case, The first line contains three positive numbers: N (≤105), the total number of the members in the supply chain (and hence they are numbered from 0 to N−1); P, the price given by the root supplier; and r, the percentage rate of price increment for each distributor or retailer. Then the next line contains N numbers, each number Si is the index of the supplier for the i-th member. Sroot for the root supplier is defined to be −1. All the numbers in a line are separated by a space. Output Specification:For each test case, print in one line the highest price we can expect from some retailers, accurate up to 2 decimal places, and the number of retailers that sell at the highest price. There must be one space between the two numbers. It is guaranteed that the price will not exceed 1010. Sample Input:129 1.80 1.001 5 4 4 -1 4 5 3 6 Sample Output:11.85 2 思路题目中给出每一个营销链中他的上一级，并且没经过一次中间商产品价格就会增加r%，产品的基本价格为p，并且只包含一个供应商，它以-1来进行标识 我们需要求出最大的营销链深度，及最大深度下零售店的个数，最后输出两个值 这个题我们既可以使用dfs求解，也可以使用bfs求解，因为本人感觉bfs的程序更容易理解，所以采用bfs进行求解 程序123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;queue&gt;#include &lt;cmath&gt;#include &lt;map&gt;#define INF 0x3f3f3f3fusing namespace std;const int maxn = 1e5+5;typedef long long ll;int n,s[maxn];double p,r;vector&lt;int&gt; vec[maxn];struct Node&#123; int pos,deep;&#125;;void BFS(int root)&#123; int max_deep = 0,num = 1; queue&lt;Node&gt; que; Node tmp&#123;root,0&#125;,node; que.push(tmp); while(!que.empty()) &#123; tmp = que.front(); que.pop(); for(int i = 0;i &lt; vec[tmp.pos].size();i ++) &#123; node.pos = vec[tmp.pos][i]; node.deep = tmp.deep+1; if(node.deep &gt; max_deep) max_deep = node.deep,num = 1; else if(node.deep == max_deep) num++; que.emplace(node); &#125; &#125; printf("%.2lf %d\n",p*pow((r/100+1),max_deep),num);&#125;int main()&#123; int root; scanf("%d%lf%lf",&amp;n,&amp;p,&amp;r); for(int i =0 ;i &lt; n;i ++) &#123; scanf("%d",s+i); vec[s[i]].push_back(i); if(s[i] == -1) root = i; &#125; BFS(root); return 0;&#125;]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
</search>
