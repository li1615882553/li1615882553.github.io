<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[PAT_1090]]></title>
    <url>%2F%2FPAT%2F1090%2Fcjrh7siis0001v0v9h6m9lw02%2F</url>
    <content type="text"><![CDATA[1090 Highest Price in Supply Chain题目描述A supply chain is a network of retailers（零售商）, distributors（经销商）, and suppliers（供应商）– everyone involved in moving a product from supplier to customer. Starting from one root supplier, everyone on the chain buys products from one’s supplier in a price P and sell or distribute them in a price that is r% higher than P. It is assumed that each member in the supply chain has exactly one supplier except the root supplier, and there is no supply cycle. Now given a supply chain, you are supposed to tell the highest price we can expect from some retailers. Input Specification:Each input file contains one test case. For each case, The first line contains three positive numbers: N (≤105), the total number of the members in the supply chain (and hence they are numbered from 0 to N−1); P, the price given by the root supplier; and r, the percentage rate of price increment for each distributor or retailer. Then the next line contains N numbers, each number Si is the index of the supplier for the i-th member. Sroot for the root supplier is defined to be −1. All the numbers in a line are separated by a space. Output Specification:For each test case, print in one line the highest price we can expect from some retailers, accurate up to 2 decimal places, and the number of retailers that sell at the highest price. There must be one space between the two numbers. It is guaranteed that the price will not exceed 1010. Sample Input:129 1.80 1.001 5 4 4 -1 4 5 3 6 Sample Output:11.85 2 思路题目中给出每一个营销链中他的上一级，并且没经过一次中间商产品价格就会增加r%，产品的基本价格为p，并且只包含一个供应商，它以-1来进行标识 我们需要求出最大的营销链深度，及最大深度下零售店的个数，最后输出两个值 这个题我们既可以使用dfs求解，也可以使用bfs求解，因为本人感觉bfs的程序更容易理解，所以采用bfs进行求解 程序123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;queue&gt;#include &lt;cmath&gt;#include &lt;map&gt;#define INF 0x3f3f3f3fusing namespace std;const int maxn = 1e5+5;typedef long long ll;int n,s[maxn];double p,r;vector&lt;int&gt; vec[maxn];struct Node&#123; int pos,deep;&#125;;void BFS(int root)&#123; int max_deep = 0,num = 1; queue&lt;Node&gt; que; Node tmp&#123;root,0&#125;,node; que.push(tmp); while(!que.empty()) &#123; tmp = que.front(); que.pop(); for(int i = 0;i &lt; vec[tmp.pos].size();i ++) &#123; node.pos = vec[tmp.pos][i]; node.deep = tmp.deep+1; if(node.deep &gt; max_deep) max_deep = node.deep,num = 1; else if(node.deep == max_deep) num++; que.emplace(node); &#125; &#125; printf("%.2lf %d\n",p*pow((r/100+1),max_deep),num);&#125;int main()&#123; int root; scanf("%d%lf%lf",&amp;n,&amp;p,&amp;r); for(int i =0 ;i &lt; n;i ++) &#123; scanf("%d",s+i); vec[s[i]].push_back(i); if(s[i] == -1) root = i; &#125; BFS(root); return 0;&#125;]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
</search>
