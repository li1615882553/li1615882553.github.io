<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[PAT_1122]]></title>
    <url>%2F%2FPAT%2Fcjrhmc0l10006rsv9rtpkupk8%2F</url>
    <content type="text"><![CDATA[1122 Hamiltonian CycleThe “Hamilton cycle problem” is to find a simple cycle that contains every vertex in a graph. Such a cycle is called a “Hamiltonian cycle”. In this problem, you are supposed to tell if a given cycle is a Hamiltonian cycle. Input Specification:Each input file contains one test case. For each case, the first line contains 2 positive integers N (2&lt;N≤200), the number of vertices, and M, the number of edges in an undirected graph. Then M lines follow, each describes an edge in the format Vertex1 Vertex2, where the vertices are numbered from 1 to N. The next line gives a positive integer K which is the number of queries, followed by K lines of queries, each in the format: n V1 V2 … Vn where n is the number of vertices in the list, and Vi’s are the vertices on a path. Output Specification:For each query, print in a line YES if the path does form a Hamiltonian cycle, or NO if not. Sample Input:1234567891011121314151617186 106 23 41 52 53 14 11 66 31 24 567 5 1 4 3 6 2 56 5 1 4 3 6 29 6 2 1 6 3 4 5 2 64 1 2 5 17 6 1 3 4 5 2 67 6 1 2 5 4 3 1 Sample Output:123456YESNONONOYESNO 思路要求判断给出的路径是否为哈密顿回路，那么哈密顿回路应该满足： 满足回路，即路径首尾相同 经过所有节点且经过一次 路径必须是连通的，即路径中相邻节点必须有路 程序1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465 #include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;queue&gt;#include &lt;cmath&gt;#include &lt;map&gt;#define INF 0x3f3f3f3fusing namespace std;const int maxn = 205;typedef long long ll;int n,m,mapp[maxn][maxn],k,path[maxn*2];bool used[maxn*2];bool Judge(int z)&#123; int num = 0; for(int i = 0;i &lt; z;i ++) if(!used[path[i]]) used[path[i]] = true,num ++; return num == n &amp;&amp; z == n+1;&#125;int main()&#123; int x,y,z; scanf("%d%d",&amp;n,&amp;m); for(int i =0 ;i &lt; m;i ++) &#123; scanf("%d%d",&amp;x,&amp;y); mapp[x][y] = mapp[y][x] = 1; &#125; scanf("%d",&amp;k); for(int i =0 ;i &lt; k;i ++) &#123; scanf("%d",&amp;z); memset(used,false,sizeof(used)); for(int j = 0;j &lt; z;j ++) scanf("%d",path+j); bool flag = true; if(path[0] == path[z-1] &amp;&amp; Judge(z)) &#123; for(int j = 1;j &lt; z;j ++) &#123; if(mapp[path[j]][path[j-1]] == 0) &#123; flag = false; break; &#125; &#125; &#125; else &#123; flag = false; &#125; if(flag) printf("YES\n"); else printf("NO\n"); &#125; return 0;&#125; 参考资料​ 哈密顿回路 -百度百科]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>哈密顿回路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT_1121]]></title>
    <url>%2F%2FPAT%2Fcjrhmc0ks0002rsv9z3pomipb%2F</url>
    <content type="text"><![CDATA[1121 Damn Single题目描述“Damn Single (单身狗)” is the Chinese nickname for someone who is being single. You are supposed to find those who are alone in a big party, so they can be taken care of. Input Specification:Each input file contains one test case. For each case, the first line gives a positive integer N (≤ 50,000), the total number of couples. Then N lines of the couples follow, each gives a couple of ID’s which are 5-digit numbers (i.e. from 00000 to 99999). After the list of couples, there is a positive integer M (≤ 10,000) followed by M ID’s of the party guests. The numbers are separated by spaces. It is guaranteed that nobody is having bigamous marriage (重婚) or dangling with more than one companion. Output Specification:First print in a line the total number of lonely guests. Then in the next line, print their ID’s in increasing order. The numbers must be separated by exactly 1 space, and there must be no extra space at the end of the line. Sample Input:123456311111 2222233333 4444455555 66666755555 44444 10000 88888 22222 11111 23333 Sample Output:12510000 23333 44444 55555 88888 思路题目中给出n对夫妇，然后给出m个来聚会的人，找出来聚会中单身的人，如果情侣没有来，那么也算单身 可以使用map存储上面的夫妇信息，也可以直接使用数组进行保存， 然后再来聚会的人中，依次遍历，如果不存在伴侣则直接保存到另一个vector中，否则判断自己的情侣有没有来 程序1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;queue&gt;#include &lt;cmath&gt;#include &lt;map&gt;#define INF 0x3f3f3f3fusing namespace std;const int maxn = 100000;typedef long long ll;int couple[maxn],x;bool come[maxn];vector&lt;int&gt; ans,wait;int main()&#123; fill(couple,couple+maxn,-1); int n,m,a,b; scanf("%d",&amp;n); for(int i = 0;i &lt; n;i ++) &#123; scanf("%d%d",&amp;a,&amp;b); couple[a] = b;couple[b] = a; &#125; scanf("%d",&amp;m); for(int i =0 ;i &lt; m;i ++) &#123; scanf("%d",&amp;x); if(couple[x] == -1) ans.push_back(x); else wait.push_back(x),come[x] = 1; &#125; for(int i = 0;i &lt; wait.size();i ++) if(!come[couple[wait[i]]]) ans.push_back(wait[i]); sort(ans.begin(),ans.end()); printf("%d\n",ans.size()); for(int i = 0;i &lt; ans.size();i ++) printf("%05d%c",ans[i],i==ans.size()-1?'\n':' '); return 0;&#125;]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>vector</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT_1090]]></title>
    <url>%2F%2FPAT%2Fcjrhmc0ki0000rsv9yukfuu3m%2F</url>
    <content type="text"><![CDATA[1090 Highest Price in Supply Chain题目描述A supply chain is a network of retailers（零售商）, distributors（经销商）, and suppliers（供应商）– everyone involved in moving a product from supplier to customer. Starting from one root supplier, everyone on the chain buys products from one’s supplier in a price P and sell or distribute them in a price that is r% higher than P. It is assumed that each member in the supply chain has exactly one supplier except the root supplier, and there is no supply cycle. Now given a supply chain, you are supposed to tell the highest price we can expect from some retailers. Input Specification:Each input file contains one test case. For each case, The first line contains three positive numbers: N (≤105), the total number of the members in the supply chain (and hence they are numbered from 0 to N−1); P, the price given by the root supplier; and r, the percentage rate of price increment for each distributor or retailer. Then the next line contains N numbers, each number Si is the index of the supplier for the i-th member. Sroot for the root supplier is defined to be −1. All the numbers in a line are separated by a space. Output Specification:For each test case, print in one line the highest price we can expect from some retailers, accurate up to 2 decimal places, and the number of retailers that sell at the highest price. There must be one space between the two numbers. It is guaranteed that the price will not exceed 1010. Sample Input:129 1.80 1.001 5 4 4 -1 4 5 3 6 Sample Output:11.85 2 思路题目中给出每一个营销链中他的上一级，并且没经过一次中间商产品价格就会增加r%，产品的基本价格为p，并且只包含一个供应商，它以-1来进行标识 我们需要求出最大的营销链深度，及最大深度下零售店的个数，最后输出两个值 这个题我们既可以使用dfs求解，也可以使用bfs求解，因为本人感觉bfs的程序更容易理解，所以采用bfs进行求解 程序123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;queue&gt;#include &lt;cmath&gt;#include &lt;map&gt;#define INF 0x3f3f3f3fusing namespace std;const int maxn = 1e5+5;typedef long long ll;int n,s[maxn];double p,r;vector&lt;int&gt; vec[maxn];struct Node&#123; int pos,deep;&#125;;void BFS(int root)&#123; int max_deep = 0,num = 1; queue&lt;Node&gt; que; Node tmp&#123;root,0&#125;,node; que.push(tmp); while(!que.empty()) &#123; tmp = que.front(); que.pop(); for(int i = 0;i &lt; vec[tmp.pos].size();i ++) &#123; node.pos = vec[tmp.pos][i]; node.deep = tmp.deep+1; if(node.deep &gt; max_deep) max_deep = node.deep,num = 1; else if(node.deep == max_deep) num++; que.emplace(node); &#125; &#125; printf("%.2lf %d\n",p*pow((r/100+1),max_deep),num);&#125;int main()&#123; int root; scanf("%d%lf%lf",&amp;n,&amp;p,&amp;r); for(int i =0 ;i &lt; n;i ++) &#123; scanf("%d",s+i); vec[s[i]].push_back(i); if(s[i] == -1) root = i; &#125; BFS(root); return 0;&#125;]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
</search>
